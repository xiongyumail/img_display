name: Build, Test and Release

on:
  push:
    branches:
      - '*'  
  release:
    types: [created]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: python test/test.py

  build:
    if: github.ref == 'refs/heads/main'
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        if: matrix.os != 'ubuntu-latest'
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies (non-Linux)
        if: matrix.os != 'ubuntu-latest'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build executable (non-Linux)
        if: matrix.os != 'ubuntu-latest'
        run: |
          cd build
          python build.py

      - name: Build Linux executable with Docker
        if: matrix.os == 'ubuntu-latest'
        run: |
          docker run --rm -v "$(pwd)":/app -w /app \
            -e USER_ID=$(id -u) -e GROUP_ID=$(id -g) \
            python:3.9-slim-bullseye /bin/bash -c "
              export DEBIAN_FRONTEND=noninteractive
              apt-get update -qq
              apt-get install -y -qq \
                build-essential \
                python3-tk \
                pkg-config \
                &>/dev/null
              python -m pip install --upgrade pip --quiet
              pip install -r requirements.txt --quiet
              pip install pyinstaller --quiet
              cd build
              python build.py
              chown -R \$USER_ID:\$GROUP_ID /app/build/dist
            "

      - name: Rename executable
        shell: bash
        run: |
          cd build/dist
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            mv display.exe ../display-windows.exe
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            mv display ../display-macos
          else
            mv display ../display-linux
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: display-${{ matrix.os }}
          path: |
            display-*
          if-no-files-found: error

  release:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: display-*
          merge-multiple: true

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          cp artifacts/* release-assets/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          files: release-assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}